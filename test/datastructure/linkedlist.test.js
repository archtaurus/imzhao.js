const { LinkedList } = require('../../lib/datastructure')

describe('imzhao.datastructure.linkedlist', () => {
    test('create', () => {
        const list = new LinkedList()
        expect(list.head).toBeNull()
        expect(list.tail).toBeNull()
        expect(list.size).toEqual(0)
        expect(list.isEmpty()).toBeTruthy()
    })

    test('create with list', () => {
        const list = new LinkedList([1, 2, 3])
        expect(list.isEmpty()).toBeFalsy()
        expect(list.size).toEqual(3)
        expect(list.head.data).toEqual(1)
        expect(list.tail.data).toEqual(3)
        expect(list.tail.prev.data).toEqual(2)
    })

    test('get and getNode', () => {
        const list = new LinkedList([1, 2, 3])
        expect(list.getNode(0).data).toEqual(1)
        expect(list.get(0)).toEqual(1)
        expect(list.getNode(1).data).toEqual(2)
        expect(list.get(1)).toEqual(2)
        expect(list.getNode(2).data).toEqual(3)
        expect(list.get(2)).toEqual(3)
        expect(list.getNode(3)).toBeNull()
        expect(list.get(3)).toBeNull()
        expect(list.getNode(-1)).toBeNull()
        expect(list.get(-1)).toBeNull()
        expect(list.getNode()).toBeNull()
        expect(list.get()).toBeNull()
    })

    test('append', () => {
        const list = new LinkedList()
        const node1 = list.append(1)
        const node2 = list.append(2)
        const node3 = list.append(3)
        expect(list.size).toEqual(3)
        expect(list.isEmpty()).toBeFalsy()
        expect(list.head).toEqual(node1)
        expect(list.tail).toEqual(node3)
        expect(node1.prev).toBeNull()
        expect(node1.next).toEqual(node2)
        expect(node2.prev).toEqual(node1)
        expect(node2.next).toEqual(node3)
        expect(node3.prev).toEqual(node2)
        expect(node3.next).toBeNull()
    })

    test('insert to empty list', () => {
        const list = new LinkedList()
        const data = 'hello'
        expect(list.insert(1, data)).toBeNull()
        expect(list.insert(-1, data)).toBeNull()
        const node = list.insert(0, data)
        expect(node.data).toEqual(data)
        expect(node.prev).toBeNull()
        expect(node.next).toBeNull()
        expect(list.head).toEqual(node)
        expect(list.tail).toEqual(node)
    })

    test('insert node to list size of 1 at 0', () => {
        const list = new LinkedList()
        const node1 = list.append(1)
        const data = 0
        expect(list.insert(-1, data)).toBeNull()
        expect(list.insert(2, data)).toBeNull()
        const node0 = list.insert(0, data)
        expect(node0.data).toEqual(data)
        expect(list.head).toEqual(node0)
        expect(node0.prev).toBeNull()
        expect(node0.next).toEqual(node1)
        expect(node1.prev).toEqual(node0)
        expect(node1.next).toBeNull()
    })

    test('insert node to list size of 1 at 1', () => {
        const list = new LinkedList()
        const node0 = list.append(0)
        const data = 1
        expect(list.insert(-1, 1)).toBeNull()
        expect(list.insert(2, data)).toBeNull()
        const node1 = list.insert(1, data)
        expect(node1.data).toEqual(data)
        expect(list.tail).toEqual(node1)
        expect(node0.prev).toBeNull()
        expect(node0.next).toEqual(node1)
        expect(node1.prev).toEqual(node0)
        expect(node1.next).toBeNull()
    })

    test('insert node to list in the middle', () => {
        const list = new LinkedList()
        const front = list.append('front')
        const behind = list.append('behind')
        expect(list.insert(-1, 1)).toBeNull()
        expect(list.insert(3, 1)).toBeNull()
        const middle = list.insert(1, 'middle')
        expect(middle.data).toEqual('middle')
        expect(front.next).toEqual(middle)
        expect(middle.prev).toEqual(front)
        expect(middle.next).toEqual(behind)
        expect(behind.prev).toEqual(middle)
    })

    test('indexOf', () => {
        const list = new LinkedList([0, 1, 2])
        expect(list.indexOf(0)).toEqual(0)
        expect(list.indexOf(1)).toEqual(1)
        expect(list.indexOf(2)).toEqual(2)
        expect(list.indexOf(3)).toEqual(-1)
    })

    test('update', () => {
        const list = new LinkedList([0, 1, 2])
        expect(list.update(-1, 'hello')).toBeFalsy()
        expect(list.update(3, 'hello')).toBeFalsy()
        expect(list.update(0, 'hello')).toBeTruthy()
        expect(list.update(1, 'hello')).toBeTruthy()
        expect(list.update(2, 'hello')).toBeTruthy()
        expect(list.get(0)).toEqual('hello')
        expect(list.get(1)).toEqual('hello')
        expect(list.get(2)).toEqual('hello')
    })

    test('removeAt', () => {
        const list = new LinkedList()
        expect(list.removeAt(-1)).toBeFalsy()
        expect(list.removeAt(0)).toBeFalsy()
        expect(list.removeAt(1)).toBeFalsy()
        list.append(1)
        list.append(2)
        expect(list.removeAt(0)).toBeTruthy()
        expect(list.head.next).toBeNull()
        expect(list.head.prev).toBeNull()
        expect(list.head.data).toEqual(2)
        expect(list.tail.data).toEqual(2)
        expect(list.size).toEqual(1)
        list.append(3)
        expect(list.removeAt(1)).toBeTruthy()
        expect(list.head.next).toBeNull()
        expect(list.head.prev).toBeNull()
        expect(list.head.data).toEqual(2)
        expect(list.tail.data).toEqual(2)
        expect(list.size).toEqual(1)
        expect(list.removeAt(0)).toBeTruthy()
        expect(list.head).toBeNull()
        expect(list.tail).toBeNull()
        expect(list.size).toEqual(0)
        list.append(0)
        list.append(1)
        list.append(2)
        list.append(3)
        list.append(4)
        expect(list.removeAt(5)).toBeFalsy()
        expect(list.size).toEqual(5)
        expect(list.removeAt(4)).toBeTruthy()
        expect(list.size).toEqual(4)
        expect(list.toArray()).toEqual([0, 1, 2, 3])
        expect(list.removeAt(0)).toBeTruthy()
        expect(list.size).toEqual(3)
        expect(list.toArray()).toEqual([1, 2, 3])
        expect(list.removeAt(1)).toBeTruthy()
        expect(list.size).toEqual(2)
        expect(list.toArray()).toEqual([1, 3])
    })

    test('remove', () => {
        const list = new LinkedList([1, 2, 3, 4, 5])
        list.remove(1)
        list.remove(3)
        list.remove(5)
        expect(list.toArray()).toEqual([2, 4])
        list.remove(2)
        expect(list.toArray()).toEqual([4])
        list.append(2)
        list.remove(4)
        expect(list.toArray()).toEqual([2])
        list.remove(2)
        expect(list.toArray()).toEqual([])
        expect(list.toArray(true)).toEqual([])
    })

    test('toArray and toString', () => {
        const list = new LinkedList([1, 2, 3])
        expect(list.toArray()).toEqual([1, 2, 3])
        expect(list.toString()).toEqual('1,2,3')
        expect(list.toArray((reverse = true))).toEqual([3, 2, 1])
        expect(list.toString((reverse = true))).toEqual('3,2,1')
    })
})
